{"version":3,"sources":["Components/ToDoForm.js","Components/ToDo.js","Components/ToDoList.js","App.js","index.js"],"names":["ToDoForm","props","useState","edit","value","taskInput","setTaskInput","InputFocus","useRef","useEffect","current","focus","className","onSubmit","e","preventDefault","id","nanoid","text","type","placeholder","onChange","target","ref","ToDo","todotasks","completeTodo","removeTodoTask","updateTodoTask","editTask","setEditTask","inputValue","map","todo","index","isComplete","onClick","ToDoList","todoTasks","setTodoTasks","todoTask","test","newTodos","updatedTodoTasks","console","log","removetask","filter","todoTaskId","newInput","previous","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c99eafc9.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport { nanoid } from 'nanoid';\r\n\r\nfunction ToDoForm(props) {\r\n    // hook to handle the input user enters in the input field\r\n    const [taskInput, setTaskInput] = useState(props.edit ? props.edit.value : '');\r\n\r\n    // keeping focus on the input field of the form\r\n    const InputFocus = useRef(null);\r\n    useEffect(() => {\r\n        InputFocus.current.focus();\r\n    })\r\n\r\n\r\n    // function to submit the input and add it to our todo list\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        props.onSubmit({\r\n            id: nanoid(),\r\n            text: taskInput, \r\n        });\r\n\r\n        setTaskInput('');\r\n    }\r\n\r\n    \r\n    return (\r\n        <div>\r\n            <form className=\"to-do-form\" onSubmit={handleSubmit}>\r\n                {props.edit ? \r\n                (\r\n                    <>\r\n                    <input type=\"text\" placeholder=\"Add a Task\" value={taskInput} className=\"to-do-task-editinput\" onChange={e => setTaskInput(e.target.value) } ref={InputFocus} />\r\n                    <button className=\"to-do-update-button\"> Update Task </button> \r\n                    </>\r\n                ) : \r\n                (\r\n                    <>\r\n                    <input type=\"text\" placeholder=\"Add a Task\" value={taskInput} className=\"to-do-task-addinput\" onChange={e => setTaskInput(e.target.value) } ref={InputFocus} />\r\n                    <button className=\"to-do-add-button\"> Add Task </button>\r\n                    </>\r\n                )\r\n                 \r\n                }\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoForm\r\n","import React from 'react'\r\nimport { useState } from 'react';\r\nimport { IoClose } from 'react-icons/io5';\r\nimport { FaRegEdit } from 'react-icons/fa';\r\nimport { MdDone } from 'react-icons/md'\r\nimport ToDoForm from './ToDoForm';\r\n\r\n\r\nfunction ToDo({todotasks, completeTodo, removeTodoTask, updateTodoTask}) {\r\n\r\n    const [editTask, setEditTask] = useState({\r\n        id: null,\r\n        value: ''\r\n    })\r\n\r\n    const performUpdate = inputValue => {\r\n        updateTodoTask(editTask.id, inputValue);\r\n        setEditTask({\r\n            id: null, \r\n            inputValue: ''\r\n        });\r\n    };\r\n\r\n    if (editTask.id) {\r\n        return (\r\n            <div>\r\n                <h4>Edit below: </h4>\r\n                <ToDoForm edit={editTask} onSubmit={performUpdate}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return todotasks.map((todo, index) => (\r\n        <div className={todo.isComplete ? 'todo-row-complete' : 'todo-row'} key={index}> \r\n            <div key={todo.id}> { todo.text } </div>\r\n                <div className=\"icons\">\r\n                    <IoClose className=\"delete-icon\" onClick={() => removeTodoTask(todo.id)} />\r\n                    <FaRegEdit className=\"edit-icon\" onClick={() => setEditTask({id: todo.id, value: todo.text})} />\r\n                    <MdDone className=\"complete-icon\" onClick={() => completeTodo(todo.id)}/>\r\n                </div>\r\n        </div>\r\n    ))\r\n}\r\n\r\nexport default ToDo;\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport ToDo from './ToDo';\r\nimport ToDoForm from './ToDoForm';\r\n\r\nfunction ToDoList() {\r\n\r\n    // creating an array for the current tasks of the user (at the start there are 0 tasks present - hence useState has an empty array inside)\r\n    const [todoTasks, setTodoTasks] = useState([]);\r\n\r\n    // adding tasks  \r\n    const addTodos = todoTask => {\r\n        // escapes extra space characters between your words in the input\r\n        if (!todoTask.text || /^\\s*$/.test(todoTask.text)) {\r\n            return;\r\n        }\r\n\r\n        const newTodos = [todoTask, ...todoTasks]\r\n        setTodoTasks(newTodos);\r\n    };\r\n\r\n\r\n    const completeTodo = id => {\r\n        let updatedTodoTasks = todoTasks.map(todo => {\r\n            if(todo.id === id) {\r\n                todo.isComplete = !todo.isComplete;\r\n            }\r\n            return todo;\r\n        })\r\n        setTodoTasks(updatedTodoTasks);\r\n        console.log(\"done\");\r\n    };\r\n\r\n\r\n    // for deleting a task user created\r\n    const removeTodoTask = id => {\r\n        const removetask = [...todoTasks].filter(todo => todo.id !== id);\r\n\r\n        setTodoTasks(removetask);\r\n    };\r\n\r\n\r\n    // for editing a task \r\n    const updateTodoTask = (todoTaskId, newInput) => {\r\n        if(!newInput.text || /^\\s*$/.test(newInput.text)) {\r\n            return;\r\n        }\r\n\r\n        setTodoTasks(previous => previous.map(item => (item.id === todoTaskId ? newInput : item)));\r\n    }; \r\n\r\n\r\n    return (\r\n        <>\r\n\r\n        <div className=\"heading-container\">\r\n            <h1 className=\"main heading\">To-Do App</h1>\r\n            <hr />\r\n            <p>“Plan your work for today and every day, then work your plan.” <br /> ~ MARGARET THATCHER </p>\r\n        </div>\r\n        <div className=\"content\">\r\n            <h3>Add your plan for today!</h3>\r\n            <hr />\r\n            <ToDoForm onSubmit={addTodos} /> \r\n            <ToDo todotasks ={todoTasks} completeTodo={completeTodo} removeTodoTask={removeTodoTask} updateTodoTask={updateTodoTask} />\r\n        </div>\r\n\r\n        <footer className=\"footer-design\"> ~ Project by Nupur Jeswani </footer>\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\nexport default ToDoList\r\n","import './App.css';\nimport ToDoList from './Components/ToDoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ToDoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}